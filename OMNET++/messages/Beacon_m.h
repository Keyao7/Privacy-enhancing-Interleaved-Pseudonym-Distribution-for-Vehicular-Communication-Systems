//
// Generated file, do not edit! Created by opp_msgtool 6.0 from veins/modules/application/Thesis_src/messages/Beacon.msg.
//

#ifndef __VEINS_BEACON_M_H
#define __VEINS_BEACON_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class Beacon;

}  // namespace veins

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress

#include "veins/modules/messages/DemoSafetyMessage_m.h" // import veins.modules.messages.DemoSafetyMessage


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/Thesis_src/messages/Beacon.msg:6</tt> by opp_msgtool.
 * <pre>
 * packet Beacon extends DemoSafetyMessage
 * {
 *     int senderAddress;
 *     uint64_t pseudonym;
 *     uint64_t pcaID;
 *     bool encrypted;
 *     double senderAngle;
 *     simtime_t timestamp = 0;
 *     bool CPN_readyFlag;
 *     string laneID;
 *     string roadID;
 *     int pseudonymChangeFlag;
 * }
 * </pre>
 */
class VEINS_API Beacon : public ::veins::DemoSafetyMessage
{
  protected:
    int senderAddress = 0;
    uint64_t pseudonym = 0;
    uint64_t pcaID = 0;
    bool encrypted = false;
    double senderAngle = 0;
    ::omnetpp::simtime_t timestamp = 0;
    bool CPN_readyFlag = false;
    ::omnetpp::opp_string laneID;
    ::omnetpp::opp_string roadID;
    int pseudonymChangeFlag = 0;

  private:
    void copy(const Beacon& other);

  protected:
    bool operator==(const Beacon&) = delete;

  public:
    Beacon(const char *name=nullptr, short kind=0);
    Beacon(const Beacon& other);
    virtual ~Beacon();
    Beacon& operator=(const Beacon& other);
    virtual Beacon *dup() const override {return new Beacon(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSenderAddress() const;
    virtual void setSenderAddress(int senderAddress);

    virtual uint64_t getPseudonym() const;
    virtual void setPseudonym(uint64_t pseudonym);

    virtual uint64_t getPcaID() const;
    virtual void setPcaID(uint64_t pcaID);

    virtual bool getEncrypted() const;
    virtual void setEncrypted(bool encrypted);

    virtual double getSenderAngle() const;
    virtual void setSenderAngle(double senderAngle);

    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);

    virtual bool getCPN_readyFlag() const;
    virtual void setCPN_readyFlag(bool CPN_readyFlag);

    virtual const char * getLaneID() const;
    virtual void setLaneID(const char * laneID);

    virtual const char * getRoadID() const;
    virtual void setRoadID(const char * roadID);

    virtual int getPseudonymChangeFlag() const;
    virtual void setPseudonymChangeFlag(int pseudonymChangeFlag);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Beacon& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Beacon& obj) {obj.parsimUnpack(b);}


}  // namespace veins


namespace omnetpp {

template<> inline veins::Beacon *fromAnyPtr(any_ptr ptr) { return check_and_cast<veins::Beacon*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEINS_BEACON_M_H

